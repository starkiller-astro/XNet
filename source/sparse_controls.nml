! Sparse solver controls

&ma48_controls

!----------------------------------------------------------------------------------------------

  !# Arrays for MA48 solver controls
  ! For more details, see http://www.hsl.rl.ac.uk/specs/ma48.pdf
  ! Default values are set initially by `MA48ID` and given in square brackets below.
  ! XNet overrides some of these defaults in `jacobian_MA48.f90`.

  !# icntl

      !### icntl(1) [6]
      ! holds the unit number to which the error messages are sent;
      ! a non-positive value suppresses all messages.

!   icntl(1) = 6

      !### icntl(2) [6]
      ! holds the unit number to which diagnostic printing is sent;
      ! a non-positive value suppresses all such printing.

!   icntl(2) = 6

      !### icntl(3) [2]
      ! used by the subroutines to control printing of error, warning, and diagnostic messages;
      ! the following options are recognized:
      ! +  <1   | No messages output.
      ! +   1   | Only error messages are output.
      ! +   2   | Error and warning messages output.
      ! +   3   | As for 2, plus scalar parameters and a few entries of array parameters on entry and exit from each subroutine.
      ! +   4   | As for 2, plus all parameter values on entry and exit from each subroutine.

!   icntl(3) = 2

      !### icntl(4) [3]
      ! the following options are recognized:
      ! +   0   | A special search technique is used to find the best pivot.
      !         | This is usually only a little slower, but can occasionally be very slow.
      !         | It may result in reduced fill-in.
      ! +  >0   | Each pivot search is limited to a maximum of `icntl(4)` columns.

!   icntl(4) = 0

      !### icntl(5) [32]
      ! used by `MA48BD` and `MA48CD` to control the full-matrix factorization;
      ! the following options are recognized:
      ! +   0   | Level 1 BLAS used.
      ! +   1   | Level 2 BLAS used.
      ! + >=2   | Level 3 BLAS used, with block column size `icntl(5)`.

!   icntl(5) = 32

      !### icntl(6) [1]
      ! used by `MA48AD`; it defines the minimum size of a block of the block triangular form other than the final block;
      ! if block triangularization is not wanted, `icntl(6)` should be set to a value greater than or equal to N;
      ! a non-positive value is regarded as the value 1.

!   icntl(6) = 4

      !### icntl(7) [1]
      ! if set to 0, `MA48AD` will handle structurally rank deficient matrices.

!   icntl(7) = 1

      !### icntl(8) [0]
      ! if set to anything other than 0, the `JOB=1` or `JOB=3` call to `MA48AD` will place each column `j`
      ! for which `IW(j)=0` at the end of the pivot sequence within its block;
      ! any call to `MA48BD` with `JOB=2` or `JOB=3` will save work by assuming that only these columns 
      ! are changed since the previous call.

!   icntl(8) = 0

      !### icntl(9) [10]
      ! limits the number of refinement iterations performed by `MA48CD`.

!   icntl(9) = 10

      !### icntl(10) [0]
      ! if set to 1, there is an immediate return from `MA48BD` if `LA` is too small,
      ! without continuing the decomposition to compute the size necessary.

!   icntl(10) = 0

      !### icntl(11) [0]
      ! if set to 1 on a `JOB=2` call to `MA48BD` and the entries in one of the blocks on the diagonal are unsuitable
      ! for the pivot sequence chosen on the previous call, the block is refactorized as on a JOB=1 call.

!   icntl(11) = 0

      !### icntl(12:20)
      ! not used at present.

  !# cntl

      !### cntl(1) [0.5]
      ! used by `MA48AD` to control the switch from sparse to full matrix processing
      ! when using MA50 to factorize the diagonal blocks;
      ! the switch is made when the ratio of number of entries in the reduced matrix
      ! to the number that it would have as a full matrix is greater than `cntl(1)`;
      ! a value greater than 1.0 is treated as 1.0.

!   cntl(1) = 0.75

      !### cntl(2) [0.1]
      ! used for threshold pivoting by `MA50` when called from either `MA48AD` or `MA48BD`;
      ! values near zero emphasize sparsity and values near one emphasize stability;
      ! if `cntl(2) < 0.0`, it is regarded as having the value 0.0;
      ! if `cntl(2) > 1.0`, it is regarded as having the value 1.0.

!   cntl(2) = 0.5

      !### cntl(3) [0.0]
      ! any entry whose modulus is less than `cntl(3)` will be dropped from the factorization
      ! by `MA50` when called from either `MA48AD` or `MA48BD`;
      ! the factorization will then require less storage but will be inaccurate.

!   cntl(3) = 0.0

      !### cntl(4) [0.0]
      ! if >0.0, `MA48AD` or `MA48BD` will treat any pivot whose modulus is less than `cntl(4)` as zero;
      ! if the matrix is rectangular or rank deficient, it is possible that entries with modulus
      ! less than `cntl(4)` are dropped from the factorization.

!   cntl(4) = 0.0

      !### cntl(5) [0.5]
      ! used by `MA48CD` to monitor the convergence of the iterative refinement;
      ! if successive corrections do not decrease by a factor of at least `cntl(5)`,
      ! convergence is deemed to be too slow and `MA48CD` terminates with `INFO(1)` set to -8.

!   cntl(5) = 0.5

      !### cntl(6:10)
      ! not used at present.

!----------------------------------------------------------------------------------------------

  !# Other controls

      !### maxerr [1.0d-11]
      ! value for the maximum allowed error in the call to `MA48CD`.

!   maxerr = 1.0d-11

/


&hsl_ma48_controls

!----------------------------------------------------------------------------------------------

  !# Arrays for HSL_MA48 solver controls (F90 interface)
  ! For more details, see http://www.hsl.rl.ac.uk/specs/hsl_ma48.pdf
  ! Default values are set initially by `ma48_initialize` and given in square brackets below.
  ! XNet overrides some of these defaults in `jacobian_HSL_MA48.f90`.

  !# control

      !### control%lp [6]
      ! holds the unit number to which the error messages are sent;
      ! a non-positive value suppresses all messages.

!   control%lp = 6

      !### control%wp [6]
      ! holds the unit number to which the warning messages are sent;
      ! a non-positive value suppresses all such printing.

!   control%wp = 6

      !### control%mp [6]
      ! holds the unit number to which diagnostic printing is sent;
      ! a non-positive value suppresses all such printing.

!   control%mp = 6

      !### control%ldiag [2]
      ! used by the subroutines to control printing of error, warning, and diagnostic messages;
      ! the following options are recognized:
      ! +  <1   | No messages output.
      ! +   1   | Only error messages are output.
      ! +   2   | Error and warning messages output.
      ! +   3   | As for 2, plus scalar parameters and a few entries of array parameters on entry and exit from each subroutine.
      ! +   4   | As for 2, plus all parameter values on entry and exit from each subroutine.

!   control%ldiag = 2

      !### control%pivoting [3]
      ! the following options are recognized:
      ! +   0   | A special search technique is used to find the best pivot.
      !         | This is usually only a little slower, but can occasionally be very slow.
      !         | It may result in reduced fill-in.
      ! +  >0   | Each pivot search is limited to a maximum of `icntl(4)` columns.

!   control%pivoting = 0

      !### control%factor_blocking [32]
      ! used by `ma48_factorize` to control the full-matrix factorization;
      ! the following options are recognized:
      ! +   0   | Level 1 BLAS used.
      ! +   1   | Level 2 BLAS used.
      ! + >=2   | Level 3 BLAS used, with block column size `control%factor_blocking`.

!   control%factor_blocking = 32

      !### control%solve_blas [2]
      ! used by `ma48_solve` to determine whether Level 2 BLAS is used or not;
      ! the following options are recognized:
      ! + <=1   | Level 2 BLAS not used.
      ! +  >1   | Level 2 BLAS used.

!   control%solve_blas = 2

      !### control%btf [1]
      ! used by `ma48_analyse`; it defines the minimum size of a block of the block triangular form other than the final block;
      ! if block triangularization is not wanted, `control%btf` should be set to a value greater than or equal to N;
      ! a non-positive value is regarded as the value 1.

!   control%btf = 4

      !### control%struct [.false.]
      ! if set to `.true.`, `ma48_analyse`` will exit immediately if structural singularity is detected

!   control%struct = .false.

      !### control%maxit [10]
      ! limits the number of refinement iterations performed by `ma48_solve`.

!   control%maxit = 10

      !### control%switch_mode [.false.]
      ! if set to `.true.` on a fast call to `ma48_factorize` and the entries in one of the blocks on the diagonal are unsuitable
      ! for the pivot sequence chosen on the previous call, the block is refactorized as on a slow call.

!   control%switch_mode = .false.

      !### control%switch [0.5]
      ! used by `ma48_analyse` to control the switch from sparse to full matrix processing
      ! when factorizing the diagonal blocks;
      ! the switch is made when the ratio of number of entries in the reduced matrix
      ! to the number that it would have as a full matrix is greater than `control%switch`;
      ! a value greater than 1.0 is treated as 1.0.

!   control%switch = 0.75

      !### control%u [0.1]
      ! used for threshold pivoting by either `ma48_analyse` or `ma48_factorize`;
      ! values near zero emphasize sparsity and values near one emphasize stability;
      ! if `control%u < 0.0`, it is regarded as having the value 0.0;
      ! if `control%u > 1.0`, it is regarded as having the value 1.0.

!   control%u = 0.5

      !### control%drop [0.0]
      ! any entry whose modulus is less than `control%drop` will be dropped from the factorization
      ! by either `ma48_analyse` or `ma48_factorize`;
      ! the factorization will then require less storage but will be inaccurate.

!   control%drop = 0.0

      !### control%tolerance [0.0]
      ! if >0.0, `ma48_analyse` or `ma48_factorize` will treat any pivot whose modulus is less than `control%tolerance` as zero;
      ! if the matrix is rectangular or rank deficient, it is possible that entries with modulus
      ! less than `control%tolerance` are dropped from the factorization.

!   control%tolerance = 0.0

      !### control%cgce [0.5]
      ! used by `ma48_solve` to monitor the convergence of the iterative refinement;
      ! if successive corrections do not decrease by a factor of at least `control%cgce`,
      ! convergence is deemed to be too slow and `ma48_solve` terminates with `sinfo%flag` set to -8.

!   control%cgce = 0.5

      !### control%multiplier [2.0]
      ! used by `ma48_factorize` when a real or integer array that holds data for the factors is too small;
      ! the array is reallocated with its size changed by the factor `control%multiplier`;
      ! the value actually used in the code is the maximum of `control%multiplier` and 1.2.

!   control%multiplier = 2.0

      !### control%diagonal_pivoting [.false.]
      ! used by `ma48_analyse` to limit pivoting to the diagonal;
      ! it will do so if `control%diagonal_pivoting` is set to `.true.`

!   control%diagonal_pivoting = .true.

      !### control%fill_in [3]
      ! used by `ma48_analyse` to determine the initial storage allocation for the matrix factors;
      ! it will be set to `control%fill_in` times the value of `matrix%ne`.

!   control%fill_in = 3

!----------------------------------------------------------------------------------------------

  !# Other controls

      !### maxerr [1.0d-11]
      ! value for the maximum allowed error in the call to `ma48_solve`.

!   maxerr = 1.0d-11

/


#if defined(XNET_OACC)
#define __dir_loop(N)           $acc parallel loop gang vector collapse(N)
#define __dir_loop_outer(N)     $acc parallel loop gang collapse(N)
#define __dir_loop_inner(N)     $acc loop vector collapse(N)
#define __dir_private(...)      $acc private(__VA_ARGS__)
#define __dir_reduction(OP,...) $acc reduction( OP:__VA_ARGS__)
#define __dir_present(...)      $acc present(__VA_ARGS__)
#define __dir_update_gpu(...)   $acc update device(__VA_ARGS__)
#define __dir_update_cpu(...)   $acc update host(__VA_ARGS__)
#define __dir_mod_create(...)   $acc create(__VA_ARGS__)
#define __dir_create(...)       $acc create(__VA_ARGS__)
#define __dir_copyin(...)       $acc copyin(__VA_ARGS__)
#define __dir_copyout(...)      $acc copyout(__VA_ARGS__)
#define __dir_copy(...)         $acc copy(__VA_ARGS__)
#define __dir_delete(...)       $acc delete(__VA_ARGS__)
#define __dir_enter_data        $acc enter data
#define __dir_exit_data         $acc exit data
#define __dir_data              $acc data
#define __dir_end_data          $acc end data
#define __dir_host_data         $acc host_data
#define __dir_end_host_data     $acc end host_data
#define __dir_dev_ptr(...)      $acc use_device(__VA_ARGS__)
#define __dir_declare           $acc declare
#define __dir_routine_seq       $acc routine seq
#define __dir_routine_vector    $acc routine vector
#define __dir_async             $acc async
#define __dir_wait              $acc wait
#define __dir_end               $acc
#elif defined(XNET_OMP_OL)
#define __dir_loop(N)           $omp target teams distribute parallel do simd collapse(N)
#define __dir_loop_outer(N)     $omp target teams distribute collapse(N)
#define __dir_loop_inner(N)     $omp parallel do simd collapse(N)
#define __dir_private(...)      $omp private(__VA_ARGS__)
#define __dir_reduction(OP,...) $omp reduction(OP:__VA_ARGS__)
#define __dir_present(...)      $omp & !present
#define __dir_update_gpu(...)   $omp target update to(__VA_ARGS__)
#define __dir_update_cpu(...)   $omp target update from(__VA_ARGS__)
#define __dir_mod_create(...)   $omp to(__VA_ARGS__)
#define __dir_create(...)       $omp map(alloc:__VA_ARGS__)
#define __dir_copyin(...)       $omp map(to:__VA_ARGS__)
#define __dir_copyout(...)      $omp map(from:__VA_ARGS__)
#define __dir_copy(...)         $omp map(tofrom:__VA_ARGS__)
#define __dir_delete(...)       $omp map(release:__VA_ARGS__)
#define __dir_enter_data        $omp target enter data
#define __dir_exit_data         $omp target exit data
#define __dir_data              $omp target data
#define __dir_end_data          $omp end target data
#define __dir_host_data         $omp target data
#define __dir_end_host_data     $omp end target data
#define __dir_dev_ptr(...)      $omp use_device_ptr(__VA_ARGS__)
#define __dir_declare           $omp declare target
#define __dir_routine_seq       $omp declare target
#define __dir_routine_vector    $omp declare target
#define __dir_async             $omp nowait
#define __dir_wait              $omp barrier
#define __dir_end               $omp if(.true.)
#endif

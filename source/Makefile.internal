##
## System configurations and architecture/installation specific MACROS
##

## Determine OS kernel (Linux or Darwin)
UNAME_S ?= $(shell uname -s)

## Define programming envionment if not set or on a Cray machine
ifdef LMOD_SYSTEM_NAME
    MACHINE=$(LMOD_SYSTEM_NAME)
else
    MACHINE=$(shell echo $${HOSTNAME%%.*} | sed 's/\(-[a-zA-Z0-9]*\)\?[0-9]*$$//')
endif
CRAY_MACHINE = \
               frontier \
               titan \
               perlmutter \
               edison \
               cori \
               chester \
               beacon

IBM_MACHINE = \
              summit \
              summitdev \
              mira

## Get PE_ENV from LMOD if being used
ifdef LMOD_FAMILY_COMPILER
    PE_ENV = $(shell echo $${LMOD_FAMILY_COMPILER} | tr a-z A-Z)
    ifeq ($(PE_ENV),GCC)
        PE_ENV = GNU
    endif
endif

FC_MPI  = mpifort
CC_MPI  = mpicc
CXX_MPI = mpic++
LDR_MPI = mpifort

ifeq ($(findstring $(MACHINE),$(IBM_MACHINE)),$(MACHINE))
    LAPACK_VER     ?= NETLIB
    GPU_LAPACK_VER ?= CUBLAS
else ifeq ($(findstring $(MACHINE),$(CRAY_MACHINE)),$(MACHINE))
    FC      = ftn
    CC      = cc
    CXX     = CC
    LDR     = ftn
    FC_MPI  = ftn
    CC_MPI  = cc
    CXX_MPI = CC
    LDR_MPI = ftn

    LAPACK_VER     ?= LIBSCI
    GPU_LAPACK_VER ?= CUBLAS
else
    LAPACK_VER     ?= NETLIB
    GPU_LAPACK_VER ?= CUBLAS
endif

#-------------------------------------------------------------------------------
# Define compiler specific variables
#-------------------------------------------------------------------------------

ifeq ($(PE_ENV),INTEL)

    ifneq ($(FC),ftn)
        FC      = ifort
        CC      = icc
        CXX     = icpc
        LDR     = ifort

        ARCHOPT = -xHost
    else ifeq ($(MACHINE),cori)
        ARCHOPT = -align array64byte
    endif
    INLINE        = -ipo

    # generic flags
    OPT_FLAGS     = -g -Ofast $(ARCHOPT) $(INLINE)
    DEBUG_FLAGS   = -g -O0 -traceback

    ifeq ($(OPENMP_MODE),ON)
        OPENMP    = -qopenmp
    else
        OPENMP    = -qopenmp-stubs
    endif
    ifeq ($(OPENACC_MODE),ON)
        OPENACC   =
    else
        OPENACC   =
    endif

    # Fortran-specific flags
    OPT_FFLAGS    =
    DEBUG_FFLAGS  = -check all,noarg_temp_created -fpe0 -gen-interfaces -warn interfaces

    F77FLAGS      = -fpp -real-size 64 -integer-size 32
    F90FLAGS      = -fpp -real-size 64 -integer-size 32

    # C-specific flags
    OPT_CFLAGS    =
    DEBUG_CFLAGS  = -check all

    # Linker flags
    OPT_LDFLAGS   =
    DEBUG_LDFLAGS =

else ifeq ($(PE_ENV),PGI)

    ifneq ($(FC),ftn)
        FC        = pgfortran
        CC        = pgcc
        CXX       = pgc++
        LDR       = pgfortran

        ARCHOPT   =
    endif
    ifneq ($(findstring $(MACHINE),$(IBM_MACHINE)),$(MACHINE))
        INLINE    = -Mipa=fast,inline,safe
    else
        INLINE    =
    endif

    # generic flags
    OPT_FLAGS     = -g -gopt -fast $(ARCHOPT) $(INLINE)
    DEBUG_FLAGS   = -g -gopt -O0 -traceback

    ifeq ($(OPENMP_MODE),ON)
        OPENMP    = -mp
    else
        OPENMP    = -mp -Mnoopenmp
    endif
    ifeq ($(OPENACC_MODE),ON)
        OPENACC   = -acc -ta=tesla:ptxinfo -Minfo=accel
    else
        OPENACC   =
    endif

    # Fortran-specific flags
    OPT_FFLAGS    =
    DEBUG_FFLAGS  = -Ktrap=fp -Mbounds -Mchkptr -Mdclchk

    F77FLAGS      = -Mpreprocess -r8 -i4 -Mfixed
    F90FLAGS      = -Mpreprocess -r8 -i4

    # C-specific flags
    OPT_CFLAGS    =
    DEBUG_CFLAGS  =

    # Linker flags
    OPT_LDFLAGS   = -pgc++libs
    DEBUG_LDFLAGS = -pgc++libs

else ifeq ($(findstring $(PE_ENV),NVIDIA NVHPC),$(PE_ENV))

    ifneq ($(FC),ftn)
        FC        = nvfortran
        CC        = nvcc
        CXX       = nvc++
        LDR       = nvfortran

        ARCHOPT   = -tp=pwr9
    endif
    ifneq ($(findstring $(MACHINE),$(IBM_MACHINE)),$(MACHINE))
        INLINE    =# -Mipa=fast,inline,safe
    else
        INLINE    =
    endif

    # generic flags
    OPT_FLAGS     = -g -gopt -O2 $(ARCHOPT) $(INLINE)
    DEBUG_FLAGS   = -g -gopt -O0 -traceback

    ifeq ($(OPENMP_MODE),ON)
        OPENMP    = -mp=multicore
    else
        OPENMP    =# -mp=multicore -Mnoopenmp
    endif
    ifeq ($(OPENACC_MODE),ON)
        OPENACC   = -acc -gpu=ptxinfo -Minfo=accel
    else
        OPENACC   =
    endif

    # Fortran-specific flags
    OPT_FFLAGS    =
    DEBUG_FFLAGS  = -Ktrap=fp -Mbounds -Mchkptr -Mdclchk

    F77FLAGS      = -Mpreprocess -r8 -i4 -Mfixed
    F90FLAGS      = -Mpreprocess -r8 -i4

    # C-specific flags
    OPT_CFLAGS    =
    DEBUG_CFLAGS  =

    # Linker flags
    OPT_LDFLAGS   = -pgc++libs
    DEBUG_LDFLAGS = -pgc++libs

else ifeq ($(PE_ENV),GNU)

    ifneq ($(FC),ftn)
        FC        = gfortran
        CC        = gcc
        CXX       = g++
        LDR       = gfortran

        ifeq ($(findstring $(MACHINE),$(IBM_MACHINE)),$(MACHINE))
          ARCHOPT   = -mtune=native
        else
          ARCHOPT   = -march=native
        endif
    endif

    # generic flags
    OPT_FLAGS     = -g -Ofast -funroll-loops -fprefetch-loop-arrays $(ARCHOPT) $(INLINE)
    DEBUG_FLAGS   = -g -Og -ggdb -ftrapv -fexceptions -Wall -Wextra \
                    -Wno-unused-variable -Wno-unused-parameter

    ifeq ($(OPENMP_MODE),ON)
        OPENMP    = -fopenmp
    else
        OPENMP    = -lgomp
    endif
    ifeq ($(OPENACC_MODE),ON)
        OPENACC   = -fopenacc
    else
        OPENACC   =
    endif

    # Fortran-specific flags
    OPT_FFLAGS    =
    DEBUG_FFLAGS  = -fcheck=bounds,do,mem,pointer -ffpe-trap=invalid,zero,overflow -fbacktrace \
                    -Wno-unused-dummy-argument -Wno-unused-label -Wno-maybe-uninitialized

    F77FLAGS      = -cpp -fdefault-real-8 -fdefault-double-8 -fimplicit-none -Wno-compare-reals
    F90FLAGS      = -cpp -fdefault-real-8 -fdefault-double-8 -fimplicit-none -ffree-line-length-none

    # C-specific flags
    OPT_CFLAGS    =
    DEBUG_CFLAGS  =

    # Linker flags
    OPT_LDFLAGS   =
    DEBUG_LDFLAGS =

else ifeq ($(PE_ENV),CRAY)

    INLINE_DB     = ./$(EXE)_inline
    INLINE        = -h wp -h pl=$(INLINE_DB)

    # generic flags
    OPT_FLAGS     = -O2 $(INLINE)
    DEBUG_FLAGS   = -O0 -eD

    ifeq ($(OPENMP_MODE),ON)
        OPENMP    =
    else
        OPENMP    = -h noomp
    endif
    ifeq ($(OPENACC_MODE),ON)
        OPENACC   =
    else
        OPENACC   = -h noacc
    endif

    # Fortran-specific flags
    OPT_FFLAGS    =
    DEBUG_FFLAGS  =

    F77FLAGS      = -eZ -s real64 -s integer32
    F90FLAGS      = -eZ -s real64 -s integer32

    # C-specific flags
    OPT_CFLAGS    =
    DEBUG_CFLAGS  =

    # Linker flags
    OPT_LDFLAGS   =
    DEBUG_LDFLAGS =

else ifeq ($(PE_ENV),XL)

    ifneq ($(FC),ftn)
        FC        = xlf2008_r
        CC        = xlc_r
        CXX       = xlc++_r
        LDR       = xlf90_r

        ARCHOPT   = -qarch=pwr9 -qtune=pwr9
    endif

    # generic flags
    OPT_FLAGS     = -g -O3 -w $(ARCHOPT) $(INLINE)
    DEBUG_FLAGS   = -g -O0 -qnosmp -qstrict=all -qfloat=rngchk -qcheck=all:nounset \
                    -qflttrap=enable:invalid:nanq:overflow:zerodivide -qsigtrap=xl__trcedump

    ifeq ($(OPENMP_MODE),ON)
        OPENMP    = -qsmp=omp:noauto
    else
        OPENMP    =
    endif
    ifeq ($(OPENACC_MODE),ON)
        OPENACC   =
    else
        OPENACC   =
    endif

    # Fortran-specific flags
    OPT_FFLAGS    =
    DEBUG_FFLAGS  = -qflag=i:w

    F77FLAGS      = -qpreprocess -qintsize=4 -qrealsize=8 -qzerosize -qport=c_loc -qundef -qsuppress=cmpmsg -qfixed
    F90FLAGS      = -qpreprocess -qintsize=4 -qrealsize=8 -qzerosize -qport=c_loc -qundef -qsuppress=cmpmsg

    # C-specific flags
    OPT_CFLAGS    =
    DEBUG_CFLAGS  =

    # Linker flags
    OPT_LDFLAGS   =
    DEBUG_LDFLAGS =

else

    $(error PE_ENV = \"$(PE_ENV)\" not supported )

endif

## Override compiler for MPI
ifeq ($(MPI_MODE),ON)
    FC  = $(FC_MPI)
    CC  = $(CC_MPI)
    CXX = $(CXX_MPI)
    LDR = $(LDR_MPI)
endif

#-------------------------------------------------------------------------------
# Library definitions and compile/link flags
#-------------------------------------------------------------------------------

## Intel Math Kernel Library (MKL)
ifeq ($(UNAME_S),Darwin)
    INTEL_PATH ?= /opt/intel/compilers_and_libraries/mac
    MKL_OS = mac
else
    INTEL_PATH ?= /opt/intel/compilers_and_libraries/linux
    MKL_OS = lnx
endif
MKLROOT    ?= $(INTEL_PATH)/mkl
ifneq ("$(wildcard ${MKLROOT}/tools/mkl_link_tool)","")
    ifeq ($(PE_ENV),INTEL)
        MKL_INC  ?= $(shell ${MKLROOT}/tools/mkl_link_tool -opts --quiet --parallel=no --compiler=intel_f --os=${MKL_OS} --linking=static)
        MKL_LIBS ?= $(shell ${MKLROOT}/tools/mkl_link_tool -libs --quiet --parallel=no --compiler=intel_f --os=${MKL_OS} --linking=static)
    else ifeq ($(PE_ENV),PGI)
        MKL_INC  ?= $(shell ${MKLROOT}/tools/mkl_link_tool -opts --quiet --parallel=no --compiler=pgi_f --os=${MKL_OS} --linking=static)
        MKL_LIBS ?= $(shell ${MKLROOT}/tools/mkl_link_tool -libs --quiet --parallel=no --compiler=pgi_f --os=${MKL_OS} --linking=static)
    else ifeq ($(PE_ENV),GNU)
        MKL_INC  ?= $(shell ${MKLROOT}/tools/mkl_link_tool -opts --quiet --parallel=no --compiler=gnu_f --os=${MKL_OS} --linking=static)
        MKL_LIBS ?= $(shell ${MKLROOT}/tools/mkl_link_tool -libs --quiet --parallel=no --compiler=gnu_f --os=${MKL_OS} --linking=static)
    else ifeq ($(PE_ENV),CRAY)
        MKL_INC  ?= $(shell ${MKLROOT}/tools/mkl_link_tool -opts --quiet --parallel=no --compiler=gnu_f --os=${MKL_OS} --linking=static)
        MKL_LIBS ?= $(shell ${MKLROOT}/tools/mkl_link_tool -libs --quiet --parallel=no --compiler=gnu_f --os=${MKL_OS} --linking=static)
    endif
endif

## Mac Accelerate Framework
ACCEL_INC      = -framework Accelerate
ACCEL_LIBS     = -framework Accelerate

## ATLAS
ATLAS_DIR     ?= /usr/local/atlas
ATLAS_INC      = -I$(ATLAS_DIR)/include
ATLAS_LIBDIR   = -L$(ATLAS_DIR)/lib
ATLAS_LIBS     = -llapack -lf77blas -lcblas -latlas

## NETLIB
NETLIB_DIR    ?= ../tools/LAPACK
BLAS_LVL1_SRC  = ddot.f dlamch.f dnrm2.f dscal.f dswap.f idamax.f lsame.f xerbla.f
BLAS_LVL2_SRC  = dger.f dgemv.f
BLAS_LVL3_SRC  = dgemm.f dtrsm.f
ifeq ($(MATRIX_SOLVER),MA48)
BLAS_LVL1_SRC += daxpy.f
BLAS_LVL2_SRC += dtrsv.f
endif
LAPACK_UTL_SRC = ieeeck.f iparmq.f
LAPACK_AUX_SRC = dgetrf2.f dlaswp.f ilaenv.f
NETLIB_SRC     = $(addprefix $(NETLIB_DIR)/, \
		 $(BLAS_LVL1_SRC) $(BLAS_LVL2_SRC) $(BLAS_LVL3_SRC) \
		 $(LAPACK_UTL_SRC) $(LAPACK_AUX_SRC) \
		 dgetrf.f dgetrs.f dgesv.f)
NETLIB_OBJ     = $(addsuffix .o,$(basename $(NETLIB_SRC)))

## ESSL
ESSL_DIR    ?= $(OLCF_ESSL_ROOT)
ESSL_INC     = -I$(ESSL_DIR)/include
ESSL_LIBDIR  = -L$(ESSL_DIR)/lib64
ESSL_LIBS    = -lessl

## PGI
PGIBLAS_LIBS = -llapack -lblas

LAPACK_INC    = $($(LAPACK_VER)_INC)
LAPACK_LIBDIR = $($(LAPACK_VER)_LIBDIR)
LAPACK_LIBS   = $($(LAPACK_VER)_LIBS)
LAPACK_SRC    = $($(LAPACK_VER)_SRC)
LAPACK_OBJ    = $(addsuffix .o,$(basename $(LAPACK_SRC)))

LAPACK_OBJ_f90 = $(addsuffix .o,$(basename $(filter %.f90,$(LAPACK_SRC))))
LAPACK_OBJ_F90 = $(addsuffix .o,$(basename $(filter %.F90,$(LAPACK_SRC))))
LAPACK_OBJ_f   = $(addsuffix .o,$(basename $(filter %.f,$(LAPACK_SRC))))
LAPACK_OBJ_F   = $(addsuffix .o,$(basename $(filter %.F,$(LAPACK_SRC))))
LAPACK_OBJ_C   = $(addsuffix .o,$(basename $(filter %.c,$(LAPACK_SRC))))
LAPACK_OBJ_CPP = $(addsuffix .o,$(basename $(filter %.cpp %.cxx,$(LAPACK_SRC))))

## PARDISO
ifneq ($(LAPACK_VER),MKL)
    PARDISO        = PARDISO
    PARDISO_DIR   ?= /usr/local/pardiso
    PARDISO_INC    =
    PARDISO_LIBDIR = -L$(PARDISO_DIR)/lib
    ifeq ($(UNAME_S),Darwin)
        PARDISO_LIBS = -lpardiso600-MACOS-X86-64
    else ifeq ($(PE_ENV),GNU)
        PARDISO_LIBS = -lpardiso600-GNU720-X86-64
    endif
else
    PARDISO        = PARDISO_MKL
endif

## MA48
MA48           = MA48
MA48_DIR      ?= .
MA48_SRC       = $(addprefix $(MA48_DIR)/, \
		 MA48.f)
MA48_OBJ       = $(addsuffix .o,$(basename $(MA48_SRC)))

## MA41
MA41           = MA41
MA41_DIR      ?= .
MA41_SRC       = $(addprefix $(MA41_DIR)/, \
		 MA41.f)
MA41_OBJ       = $(addsuffix .o,$(basename $(MA41_SRC)))

SOLVER         = $($(MATRIX_SOLVER))
ifeq ($(SOLVER),)
    SOLVER     = $(MATRIX_SOLVER)
endif
JAC_OBJ        = xnet_jacobian_$(SOLVER).o

SOLVER_INC     = $($(MATRIX_SOLVER)_INC)
SOLVER_LIBDIR  = $($(MATRIX_SOLVER)_LIBDIR)
SOLVER_LIBS    = $($(MATRIX_SOLVER)_LIBS)
SOLVER_SRC     = $($(MATRIX_SOLVER)_SRC)
SOLVER_OBJ     = $(addsuffix .o,$(basename $(SOLVER_SRC)))

SOLVER_OBJ_f90 = $(addsuffix .o,$(basename $(filter %.f90,$(SOLVER_SRC))))
SOLVER_OBJ_F90 = $(addsuffix .o,$(basename $(filter %.F90,$(SOLVER_SRC))))
SOLVER_OBJ_f   = $(addsuffix .o,$(basename $(filter %.f,$(SOLVER_SRC))))
SOLVER_OBJ_F   = $(addsuffix .o,$(basename $(filter %.F,$(SOLVER_SRC))))
SOLVER_OBJ_C   = $(addsuffix .o,$(basename $(filter %.c,$(SOLVER_SRC))))
SOLVER_OBJ_CPP = $(addsuffix .o,$(basename $(filter %.cpp,$(SOLVER_SRC))))

## Define compiler flags
FLAGS     = $($(CMODE)_FLAGS) $(EXTRA_FLAGS)
FFLAGS   += $(FLAGS) $($(CMODE)_FFLAGS) $(OPENMP)
CFLAGS   += $(FLAGS) $($(CMODE)_CFLAGS) $(OPENMP)
CXXFLAGS += $(FLAGS) $($(CMODE)_CXXFLAGS) $(OPENMP)
LDFLAGS  += $(FLAGS) $($(CMODE)_LDFLAGS) $(OPENMP)
